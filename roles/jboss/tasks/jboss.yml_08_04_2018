
- name: check_jboss_source
  local_action: stat path=../files/{{ jboss_zip }}.zip
  register: source_jboss_tar_gz

- name: copy installation jboss
  copy: src=files/{{ jboss_zip }}.zip dest={{ jboss_home }} owner={{ jboss_user }} group={{ jboss_group }} mode=0644

- name: check if the joss_home exists
  stat: path="{{ jboss_config_dir }}"
  register: jboss_real_home_check

- name: unarchive {{ jboss_zip }}.zip
  unarchive:
    src: "{{ jboss_home }}/{{ jboss_zip }}.zip"
    dest: "{{ jboss_home }}"
    owner: "{{ jboss_user }}"
    group: "{{ jboss_group }}"
    copy: no
  when: jboss_real_home_check.stat.isdir is not defined or not jboss_real_home_check.stat.isdir

- name: create link simbolic
  shell: cd {{ jboss_home }} && ln -s {{ jboss_home }}/{{ jboss_ver }} jboss-eap

- name: create folder master
  shell: cp -R {{ jboss_home }}/jboss-eap/domain {{ jboss_home }}/jboss-eap/master
  when: inventory_hostname == groups['jboss-servers'][0]

- name: create folder slave1
  shell: cp -R {{ jboss_home }}/jboss-eap/domain {{ jboss_home }}/jboss-eap/{{ ansible_hostname }}

- name: clean configuration slave host.xml
  file: path="{{jboss_home}}/jboss-eap/{{ansible_hostname}}/configuration/host.xml" state=absent

- name: clean configuration slave domain.xml
  file: path="{{jboss_home}}/jboss-eap/{{ansible_hostname}}/configuration/domain.xml" state=absent

- name: delete sorgente zip JBOSS {{ jboss_zip }}.zip
  file: state=absent path="{{ jboss_home }}/{{ jboss_zip }}.zip"

- name: create directory scripts
  file: path={{ jboss_home }}/scripts owner={{ jboss_user }} group={{ jboss_group }} mode=0775 state=directory recurse=no

- name: copy script start master
  template:
    src: jboss_eap_master.sh
    dest: "{{ jboss_home }}/scripts/jboss-eap-master.sh"
    mode: 0755
  when: inventory_hostname == groups['jboss-servers'][0]

- name: copy script start init master
  template:
    src: jboss_eap_init_master.sh
    dest: "{{ jboss_home }}/scripts/jboss-eap-init-master.sh"
    mode: 0755
  when: inventory_hostname == groups['jboss-servers'][0]

- name: copy script start controller
  template:
    src: jboss_eap_controller.sh
    dest: "{{ jboss_home }}/scripts/jboss-eap-{{ansible_hostname}}.sh"
    mode: 0775

- name: copy script start init controller
  template:
    src: jboss-eap-init-controller.sh
    dest: "{{ jboss_home }}/scripts/jboss-eap-init-{{ansible_hostname}}.sh"
    mode: 0775

- name: copy add-user.sh
  template:
    src: add-user.sh
    dest: "{{ jboss_home }}/jboss-eap/bin/add-user.sh"
    mode: 0775

- name: create directory jboss.conf.d
  file: path={{ jboss_home }}/jboss-eap/jboss.conf.d owner={{ jboss_user }} group={{ jboss_group }} mode=0775 state=directory recurse=no

- name: create folder rilasci
  file: path={{ jboss_home }}/rilasci owner={{ jboss_user }} group={{ jboss_group }} mode=0775 state=directory recurse=no
  when: inventory_hostname == groups['jboss-servers'][0]

- name: crypt secret
  shell: echo -n "{{ jbossdomainpassword }}" | base64
  register: secret
- set_fact: secret={{ secret.stdout }}

- set_fact: slave='{{hostvars[groups["jboss-servers"][0]].slave}}'
  when: inventory_hostname == groups['jboss-servers'][0] 

- set_fact: slave='{{hostvars[groups["jboss-servers"][1]].slave}}'
  when: inventory_hostname == groups['jboss-servers'][1]

- name: copy host-slave.xml
  template:
    src: host-slave.xml
    dest: "{{jboss_home}}/jboss-eap/{{ansible_hostname}}/configuration/host-slave.xml"
    mode: 0755

- name: copy enviroment configuration master jboss-master.conf
  template: src=jboss-master.conf dest={{ jboss_home }}/jboss-eap/jboss.conf.d/jboss-master.conf mode=0777
  when: inventory_hostname == groups['jboss-servers'][0]

- name: copy enviroment configuration servers jboss-{{ansible_hostname}}.conf
  template: src=jboss-controller.conf dest={{ jboss_home }}/jboss-eap/jboss.conf.d/jboss-{{ansible_hostname}}.conf mode=0777

- name: copy enviroment configuration master domain.xml
  template: src=MASTER_domain.xml dest={{ jboss_home }}/jboss-eap/master/configuration/domain.xml
  when: inventory_hostname == groups['jboss-servers'][0]

- name: copy enviroment configuration master host-slave.xml
  template: src=MASTER_host-slave.xml dest={{ jboss_home }}/jboss-eap/master/configuration/host-slave.xml
  when: inventory_hostname == groups['jboss-servers'][0]

- name: copy enviroment configuration master host.xml
  template: src=MASTER_host.xml dest={{ jboss_home }}/jboss-eap/master/configuration/host.xml
  when: inventory_hostname == groups['jboss-servers'][0]

- name: copy enviroment configuration master host-master.xml
  template: src=MASTER_host-master.xml dest={{ jboss_home }}/jboss-eap/master/configuration/host-master.xml
  when: inventory_hostname == groups['jboss-servers'][0]

- name: Create default JBoss admin user
  shell: ". {{ jboss_home }}/jboss-eap/jboss.conf.d/jboss-master.conf && cd {{ jboss_home }}/jboss-eap/bin && ./add-user.sh -r ManagementRealm -u {{jbossadminuser}} -p {{jbossadminpassword}}"
  when: inventory_hostname == groups['jboss-servers'][0]

- name: Create default JBoss host user
  shell: ". {{ jboss_home }}/jboss-eap/jboss.conf.d/jboss-master.conf && cd {{ jboss_home }}/jboss-eap/bin && ./add-user.sh -r ManagementRealm -u host -p {{jbossadminpassword}}"
  when: inventory_hostname == groups['jboss-servers'][0]

- name: Create default JBoss admin user slave
  shell: ". {{ jboss_home }}/jboss-eap/jboss.conf.d/jboss-{{ansible_hostname}}.conf && cd {{ jboss_home }}/jboss-eap/bin && ./add-user.sh -r ManagementRealm -u {{jbossadminuser}} -p {{jbossadminpassword}}"
  when: inventory_hostname == groups['jboss-servers'][1]

- name: Create default JBoss host user slave
  shell: ". {{ jboss_home }}/jboss-eap/jboss.conf.d/jboss-{{ansible_hostname}}.conf && cd {{ jboss_home }}/jboss-eap/bin && ./add-user.sh -r ManagementRealm -u host -p {{jbossadminpassword}}"
  when: inventory_hostname == groups['jboss-servers'][1]

- include_tasks: jboss_start.yml

- include_tasks: jboss_cli.yml


